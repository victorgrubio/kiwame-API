swagger: "2.0"
info:
  version: "1.0"
  title: KIWAME API REST
  description: API for the management of KIWAME 
tags:
  - name: admin
    description: Admin Operations
  - name: users
    description: Operations about users  
  - name: patient
    description: Operations about patients   
  - name: profesional
    description: Operations about profesionals  
  - name: measurements
    description: Operations about measurements  
  - name: keys
    description: Operations about Api keys  
  - name: notifications
    description: Operations about notifications  
  - name: messages
    description: Operations about messages   
  - name: nutrients
    description: Operations about nutrients 
  - name: food
    description: Operations about food 
  - name: ingredients
    description: Operations about ingredients 
  - name: drinks
    description: Operations about drinks 
  - name: rules
    description: Operations about rules 
securityDefinitions:
  ApiKey:
    type: "apiKey"
    name: "x-api-key"
    in: "header"
    description: "Security sheme migrated from security policy"
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: |
     For accessing the API a valid JWT token must be passed in all the queries in
     the 'Authorization' header.


     A valid JWT token is generated by the API and retourned as answer of a call
     to the route /login giving a valid user & password.


     The following syntax must be used in the 'Authorization' header :

       Bearer xxxxxx.yyyyyyy.zzzzzz


# during dev, should point to your local machine
#host: 80.58.61.69  #PRODUCCIÃ“N
#host: 138.4.47.33:8163  #UPM DEV
#host: localhost:8090  #LOCAL DEV
# basePath prefixes all resource paths


basePath: / #dds
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json

paths:
  /user/login:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      operationId: login
      summary: Login user
      description: "Login with a particular role"
      produces:
        - application/json
      parameters:
        - in: body
          name: authentication
          description: the login data
          schema:
            $ref: "#/definitions/AuthenticationObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TokenResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
  /users/all:
    x-swagger-router-controller: user
    get:
      tags:
        - admin
      operationId: findAllUsers
      summary: Retrieve all users   
      description: "Return all users. Role: Admin"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UsersResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
  /user/emails:
    x-swagger-router-controller: user
    get:
      tags:
        - admin
      operationId: findAllUsersEmails
      summary: Retrieve users emails
      description: "Return all users and emails. "
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/UsersEmailResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
  /user/newhealthprofesional:
    x-swagger-router-controller: user
    post:
      tags:
        - admin
      summary: Add new Health Profesional
      description: "Send a link to a new Health Profesional to join the platfomrm."
      operationId: newMedicalProfile
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: body
          description: The email of the health profesional
          schema:
            $ref: "#/definitions/ForgotPasswordObject"
          required: true
      responses:
        "200":
          description: Link to join to the app sent to the email
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user:
    # binds a127 app logic to a route
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: Create new user
      description: Create a new user in the DB
      operationId: newUser
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name:  user
          in: body
          description: The user JSON you want to POST
          schema:
            $ref: "#/definitions/UserObject"
          required: true
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: User Created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "409":
          description: User already registered
          schema:
            $ref: "#/definitions/ServerResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user/language:
    # binds a127 app logic to a route
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: Set user language
      description: set the prefered user language
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - patient
        - profesional
      operationId: setLanguage
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name:  language
          in: body
          description: The language
          schema:
            $ref: "#/definitions/UserLanguageObject"
          required: true
      responses:
        "200":
          description: Language setted
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user/refreshtoken:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      operationId: refreshToken
      summary: Refresh token
      description: "refresh and expired token"
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - patient
        - profesional
      produces:
        - application/json
      parameters:
        - in: body
          name: refreshToken
          description: the refreshToken
          schema:
            $ref: "#/definitions/refreshObject"
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/TokenResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /user/search:
    x-swagger-router-controller: user

    post:
      tags:
        - users
      summary: search user
      description: search if a user exists in order to add them as a patient.  Role medical.
      operationId: searchUser
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The nickname of the user
          schema:
            $ref: "#/definitions/userSearchObject"
          required: true
      responses:
        "200":
          description: Profile exists
          schema:
            $ref: "#/definitions/UserSearchResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"                
  /user/sendverificationemail:
    x-swagger-router-controller: user
    get:
      tags:
        - users
      summary: Send verification email  
      description: Send verification email to logged user
      operationId: sendVerification
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      produces:
        - application/json
      responses:
        "200":
          description: email sent
          schema:
            $ref: "#/definitions/ServerResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /user/verify/{email}/{token}:
    x-swagger-router-controller: user
    get:
      tags:
        - users
      summary: verify email
      description: Update the user to verify the emal
      operationId: verifyEmail
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: path
          description: The email of the user to verify
          type: string
          required: true
        - name: token
          in: path
          description: The token to verify 
          type: string
          required: true
      responses:
        "200":
          description: User verified
          schema:
            $ref: "#/definitions/ServerResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /user/toggle/enabled/{id}:
    x-swagger-router-controller: user
    put:
      tags:
        - admin
      summary: Toggle user enabled/disable
      description: Update the user to enable or disable
      operationId: toggleEnabled
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the user to update
          type: string
          required: true

      responses:
        "200":
          description: User Updated
          schema:
            # a pointer to a definition
            $ref: "#/definitions/UserResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user/pushnotifications:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: Register for notifications 
      description: Register user for  push notifications 
      operationId: saveNotifcationsToken
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: body
          description: the registration form for push notifications
          schema:
            $ref: "#/definitions/RegisterObject"
          required: true
      responses:
        "200":
          description: User registered for push notifications
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "409":
          description: User already registered
          schema:
            $ref: "#/definitions/ServerResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - users
      summary: Update Register tokens 
      description: Update token  for  push notifications 
      operationId: updateNotifcationsToken
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: body
          description: the registration form for push notifications
          schema:
            $ref: "#/definitions/RegisterObject"
          required: true
      responses:
        "200":
          description: token updated for push notifications
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    delete:
      tags:
        - users
      summary: Unregister tokens 
      description: delete token  for  push notifications 
      operationId: unregisterForNotifications
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "204":
          description: User unregistered for push notifications
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /user/forgotpassword:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: Forgot password
      description: Send email for reset the password
      operationId: forgotPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: email
          in: body
          description: The email of the user to retrieve new password
          schema:
            $ref: "#/definitions/ForgotPasswordObject"
          required: true
      responses:
        "200":
          description: Request for new password sent
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "404":
          description: Sensor Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user/resetpassword/{token}:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: reset the user password
      description: Update the user password with a new one
      operationId: resetPassword
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: token
          in: path
          description: The received hash
          type: string
          required: true
        - name: body
          in: body
          description: The email of the user to retrieve new password
          schema:
            $ref: "#/definitions/ResetPasswordObject"
          required: true
      responses:
        "200":
          description: Request for new pÃ ssword received
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /user/changepassword:
    x-swagger-router-controller: user
    post:
      tags:
        - users
      summary: Change password
      description: Update the users password
      operationId: changePassword
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - patient
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The email of the user to retrieve new password
          schema:
            $ref: "#/definitions/ChangePasswordObject"
          required: true
      responses:
        "200":
          description: Request for new password received
          schema:
            # a pointer to a definition
            $ref: "#/definitions/TokenResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /user/{id}:
    x-swagger-router-controller: user
    delete:
      tags:
        - admin
      summary: Delete  user
      description: Delete the user with the selected id, from the DB
      # used as the method name of the controller
      operationId: removeUser
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the user to delete
          type: string
          required: true
      responses:
        "204":
          description: deleted Success
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/profile:
    x-swagger-router-controller: patient
    post:
      tags:
        - patient
      summary: Create Profile user
      description: create the users profile
      operationId: saveProfile
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The profile of the user
          schema:
            $ref: "#/definitions/PatientProfileObject"
          required: true
      responses:
        "201":
          description: Profile created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - patient
      summary: Update Profile user
      description: update the users profile
      operationId: updateProfile
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The profile of the user
          schema:
            $ref: "#/definitions/PatientProfileObject"
          required: true
      responses:
        "201":
          description: Profile created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/races:
    x-swagger-router-controller: patient
    get:
      tags:
        - patient
      summary: Retrive races  types
      description: Retrive races types
      operationId: getRaceTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: races retrieved
          schema:
            $ref: "#/definitions/RaceTypesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/genders:
    x-swagger-router-controller: patient
    get:
      tags:
        - patient
      summary: Retrive gender  types
      description: Retrive gender types
      operationId: getGenderTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: gender retrieved
          schema:
            $ref: "#/definitions/GenderTypesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/requests:
    x-swagger-router-controller: patient
    get:
      tags:
        - patient
      summary: Get profesional requests
      description: get profesional requests to connect with patient
      operationId: getRequests
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces:
        - application/json   
      responses:
        "200":
          description: Requests retrieved
          schema:
            $ref: "#/definitions/RequestsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/request/{id}:
    x-swagger-router-controller: patient
    delete:
      tags:
        - patient
      summary: Rejet profesional requests
      description: reject profesional requests to connect with patient
      operationId: rejectRequest
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      parameters:
        - name: id
          in: path
          description: The id of the request to reject
          type: string
          required: true
      consumes:
        - application/json   
      responses:
        "200":
          description: Requests rejected
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Request Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - patient
      summary: Accept profesional requests
      description: accept profesional requests to connect with patient
      operationId: acceptRequest
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      parameters:
        - name: id
          in: path
          description: The id of the request to accept
          type: string
          required: true
      consumes:
        - application/octet-stream  
      responses:
        "201":
          description: Requests accepted connection created
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Request Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/remove/{profesional}:
    x-swagger-router-controller: patient
    delete:
      tags:
        - patient
      summary: remove profesional connection
      description: remove profesional connection with patient
      operationId: removeProfesional
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      parameters:
        - name: profesional
          in: path
          description: The nickname of the profesional to remove
          type: string
          required: true
      produces:
        - application/json   
      responses:
        "200":
          description: Profesional  removed
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Request Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/profesionals:
    x-swagger-router-controller: patient
    get:
      tags:
        - patient
      summary: Get connected profesionals  
      description: Get the profesionals conected with the patient
      operationId: getProfesionals
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: Profesionals retrieved
          schema:
            $ref: "#/definitions/ProfesionalsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/profile:
    x-swagger-router-controller: profesional
    post:
      tags:
        - profesional
      summary: Create Profesional Profile 
      description: create the profesional profile
      operationId: saveProfesionalProfile
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The profile of the profesional
          schema:
            $ref: "#/definitions/ProfesionalProfileObject"
          required: true
      responses:
        "201":
          description: Profile created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - profesional
      summary: Update  Profile 
      description: update the profesional profile
      operationId: updateProfesionalProfile
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The profile of the profesional
          schema:
            $ref: "#/definitions/ProfesionalProfileObject"
          required: true
      responses:
        "201":
          description: Profile created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /patient/{user}:
    x-swagger-router-controller: patient
    get:
      tags:
        - patient
      summary: Get Profile user
      description: retrieve an user profile if allowed
      operationId: getProfile
      security:
        - Bearer: []
      x-security-scopes:
        - patient
        - profesional
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: The id of the user to delete
          type: string
          required: true
      responses:
        "201":
          description: Profile retrieved
          schema:
            $ref: "#/definitions/PatientProfileResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/request:
    x-swagger-router-controller: profesional
    post:
      tags:
        - profesional
      summary: Request patient access
      description: create request to connect with patient
      operationId: newRequest
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The nickname of the patient to connect
          schema:
            $ref: "#/definitions/newRequestObject"
          required: true
      responses:
        "200":
          description: Request ready
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "404":
          description: Profesional Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/request/{id}:
    x-swagger-router-controller: profesional
    delete:
      tags:
        - profesional
      summary: Remove profesional requests
      description: Remove profesional requests to connect with patient
      operationId: removeRequest
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      parameters:
        - name: id
          in: path
          description: The id of the request to reject
          type: string
          required: true
      produces:
        - application/json   
      responses:
        "200":
          description: Requests rejected
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Request Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/requests:
    x-swagger-router-controller: profesional
    get:
      tags:
        - profesional
      summary: Get requests
      description: get requests to connect with patient
      operationId: getPendantRequests
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json   
      responses:
        "200":
          description: Request retrieved
          schema:
            $ref: "#/definitions/RequestsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/patients:
    x-swagger-router-controller: profesional
    get:
      tags:
        - profesional
      summary: Get connected patients  
      description: Get the patients conected with the profesional
      operationId: getPatients
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: patients retrieved
          schema:
            $ref: "#/definitions/PatientsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/remove/{patient}:
    x-swagger-router-controller: profesional
    delete:
      tags:
        - profesional
      summary: remove patient connection
      description: remove profesional connection with patient
      operationId: removePatient
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      parameters:
        - name: patient
          in: path
          description: The nickname of the patient to remove
          type: string
          required: true
      produces:
        - application/json   
      responses:
        "204":
          description: Patient  removed
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Request Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /profesional/{user}:
    x-swagger-router-controller: profesional
    get:
      tags:
        - profesional
      summary: Get Profesional Profile 
      description: retrieve a profesional profile if allowed
      operationId: getProfesionalProfile
      security:
        - Bearer: []
      x-security-scopes:
        - patient
        - profesional
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: The id of the profesional to retrieve
          type: string
          required: true
      responses:
        "201":
          description: Profile retrieved
          schema:
            $ref: "#/definitions/ProfesionalProfileResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profesional Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /measurements:
    x-swagger-router-controller: measure
    post:
      tags:
        - measurements
      summary: Post a single measure 
      description: Post the a measure for the loged user
      operationId: newMeasure
      security:
        - Bearer: []
      x-security-scopes:
        - patient
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          description: The user and the measure
          schema:
            $ref: "#/definitions/MeasureRequestObject"
          required: true
      responses:
        "201":
          description: Measure saved
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /measurements/status/{user}:
    x-swagger-router-controller: measure
    get:
      tags:
        - measurements
      summary: Retrieve the status
      description: Retrieve the last status of all saved measurements 
      operationId: getStatus
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: the user to retrieve the measure
          type: string
          required: true
      responses:
        "200":
          description: measurements retrieved
          schema:
            $ref: "#/definitions/MeasurementsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Measurement Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /measurements/{measure}/{days}/{user}:
    x-swagger-router-controller: measure
    get:
      tags:
        - measurements
      summary: Retrieve measurements
      description: Retrieve measurements of one type
      operationId: getMeasurements
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: measure
          in: path
          description: The type of the measure
          type: number
          required: true
        - name: days
          in: path
          description: the days to retrieve
          type: number
          required: true
        - name: user
          in: path
          description: the user to retrieve the measure
          type: string
          required: true
      responses:
        "200":
          description: measurements retrieved
          schema:
            $ref: "#/definitions/MeasurementsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Measurement Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /measurements/types:
    x-swagger-router-controller: measure
    get:
      tags:
        - measurements
      summary: Retrive measurements  types
      description: Retrive measurements types
      operationId: getMeasurementsTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: measures retrieved
          schema:
            $ref: "#/definitions/MeasureTypesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /notifications/types:
    x-swagger-router-controller: notification
    get:
      tags:
        - notifications
      summary: Retrive notifications  types
      description: Retrive notification types
      operationId: getNotificationTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - admin
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: measures retrieved
          schema:
            $ref: "#/definitions/NotificationTypesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /notifications/count:
    x-swagger-router-controller: notification
    get:
      tags:
        - notifications
      summary: Get number of notifications  
      description: Get the logged user number of notifications
      operationId: countNotifications
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: notifications retrieved
          schema:
            $ref: "#/definitions/NotificationsCountResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"  
  /notifications:
    x-swagger-router-controller: notification
    get:
      tags:
        - notifications
      summary: Get user notifications  
      description: Get the logged user notifications
      operationId: getNotifications
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: notifications retrieved
          schema:
            $ref: "#/definitions/NotificationsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /notifications/{id}:
    x-swagger-router-controller: notification
    delete:
      tags:
        - notifications
      summary: Delete Notification
      description: Delete Notification
      operationId: deleteNotification
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the user to delete
          type: string
          required: true
      responses:
        "200":
          description: patients retrieved
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /messages/count:
    x-swagger-router-controller: message
    get:
      tags:
        - messages
      summary: Get number of messages  
      description: Get the logged user number of messages
      operationId: countMessages
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: notifications retrieved
          schema:
            $ref: "#/definitions/MessagesCountResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"  
  /messages/{user}:
    x-swagger-router-controller: message
    post:
      tags:
        - messages
      summary: post message   
      description: post message to a conected user
      operationId: newMessage
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: The user nickname of the receiver
          type: string
          required: true
        - name: body
          in: body
          description: the actual message
          schema:
            required:
              - message
            properties:
              message:
                type: string
                example: message
          required: true
      responses:
        "201":
          description: Message sent
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Receiver Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    get:
      tags:
        - messages
      summary: Retrieve messages  
      description: Retreive messages from connected users
      operationId: getMessages
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: The name of the user to get all messages
          type: string
          required: true
        - name: next
          in: query
          description: the id for retrieve the next page of results
          type: number
          required: false
      responses:
        "200":
          description: patients retrieved
          schema:
            $ref: "#/definitions/MessagesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - messages
      summary: Mark as read 
      description: Mark message as read all messages from an user
      operationId: markMessageAsRead
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: user
          in: path
          description: The name  of the user to mark as read his messages
          type: string
          required: true
      responses:
        "200":
          description: messages set as viewed
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"

  /key:
    # binds a127 app logic to a route
    x-swagger-router-controller: key
    post:
      tags:
        - keys
      summary: Create new key
      description: Create a new key in the DB
      operationId: newKey
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name:  key
          in: body
          description: The key JSON you want to POST
          schema:
            $ref: "#/definitions/KeyObject"
          required: true
      responses:
        "201":
          description: Key Created
          schema:
            $ref: "#/definitions/KeyResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"

        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /key/all:
    x-swagger-router-controller: key
    get:
      tags:
        - keys
      summary: get all keys
      description: Retrieve all keys from the user
      operationId: findAllKeys
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - user
      consumes:
        - application/json
      produces:
        - application/json

      responses:
        "200":
          description: Keys retrieved
          schema:
            $ref: "#/definitions/KeysResponse"
        "404":
          description: Keys Not found
          schema:
            $ref: "#/definitions/NotFoundResponse"

        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /key/{id}:
    x-swagger-router-controller: key
    delete:
      tags:
        - keys
      summary: Delete  key
      description: Create a new key in the DB
      operationId: deleteKey
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the key to delete
          type: string
          required: true
      responses:
        "204":
          description: deleted Success
        "404":
          description: Key Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - keys
      summary: Toggle enabled
      description: Update the key to enable or disable
      operationId: toggleEnabledKey
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the key to update
          type: string
          required: true

      responses:
        "200":
          description: Key Updated
          schema:
            # a pointer to a definition
            $ref: "#/definitions/KeyResponse"
        "404":
          description: Key Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /rule/types:
    x-swagger-router-controller: rule
    get:
      tags:
        - rules
      summary: Retrieve all rule tpyes
      description: Retreive all rules types
      operationId: getRuleTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - profesional
        - admin 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: rules retrieved
          schema:
            $ref: "#/definitions/RulesTypeResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Rules types Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /rule/conditionTypes:
    x-swagger-router-controller: rule
    get:
      tags:
        - rules
      summary: Retrieve condition tpyes
      description: Retreive all condition
      operationId: getConditionTypes
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - profesional
        - admin 
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
      responses:
        "200":
          description: Conditions retrieved
          schema:
            $ref: "#/definitions/ConditionsTypeResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Conditions types Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /rule/all:
    x-swagger-router-controller: rule
    get:
      tags:
        - rules
      summary: Retrieve all rules  
      description: Retreive all rules created by a profesional by the admin or assigned to a patient
      operationId: findAll
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin 
        - patient
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        "200":
          description: Rules retrieved
          schema:
            $ref: "#/definitions/RulesResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Rules Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /rule:
    x-swagger-router-controller: rule
    post:
      tags:
        - rules
      operationId: newRule
      summary: post a new rule
      description: Upload a new rule
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - name:  rule
          in: body
          description: The rule JSON you want to post
          schema:
            $ref: "#/definitions/RuleObject"
          required: true

      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /rule/default:
    x-swagger-router-controller: rule
    post:
      tags:
        - rules
      operationId: defaultRules
      summary: create default rules
      description: create the default rules for a user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes: 
        - application/json
        - application/octet-stream
      produces: 
        - application/json
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found or missing arguments"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse" 
  /rule/{id}:
    x-swagger-router-controller: rule
    get:
      tags:
        - rules
      summary: Toogle enabled 
      description: toogle enable/disabled rule
      operationId: findById
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the rule to toogle
          type: string
          required: true
      responses:
        "200":
          description: rule retrieves
          schema:
            $ref: "#/definitions/RuleResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Rule Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - rules
      summary: Toogle enabled 
      description: toogle enable/disabled rule
      operationId: toogleEnabled
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin
      consumes:
        - application/json
        - application/octet-stream
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the rule to toogle
          type: string
          required: true
      responses:
        "200":
          description: rule Enabled/Disabled
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Rule Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    delete:
      tags:
        - rules
      summary: Delete rule
      description: Delete rule
      operationId: deleteRule
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the rule to delete
          type: string
          required: true
      responses:
        "200":
          description: Rule removed
          schema:
            $ref: "#/definitions/ServerResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Profile Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food:
    x-swagger-router-controller: food
    post:
      tags:
        - food
      operationId: newFood
      summary: post a meal picture
      description: Upload a photo of a meal for the logged user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - multipart/form-data
      produces: 
        - application/json
      parameters:

        - name: image
          in: formData
          type: file
          required: true
      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/NewFoodResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/history/{user}:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getFoods
      summary: Retrieve food history
      description: Retrieve the food history of the  user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string
        - name: user
          in: path
          description: The nickname of the user to retrieve food history
          type: string
          required: true
        - name: next
          in: query
          description: the id for retrieve the next page of results
          type: number
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FoodHistoryResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/images/{size}/{image}:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getFoodImageSize
      summary: Retrieve food history
      description: Retrieve the food history of the  user
      security:
        - Bearer: []
        - ApiKey: []

      x-security-scopes:
        - patient
        - admin
      consumes:
        - application/json
      produces: 
        - image/jpeg
      parameters:
        - name: size
          in: path
          description: The size of the image big medium small
          type: string
          enum: [small, medium, big]
          required: true
        - name: image
          in: path
          description: The id of the image
          type: string
          required: true
      responses:
        "200":
          description: "Success"   
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/images/{image}:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getFoodImage
      summary: Retrieve food history
      description: Retrieve the food history of the  user
      security:
        - Bearer: []
        - ApiKey: []

      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces: 
        - image/jpeg
      parameters:
        - name: image
          in: path
          description: The id of the image
          type: string
          required: true
      responses:
        "200":
          description: "Success"   
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/name:
    x-swagger-router-controller: food
    post:
      tags:
        - food
      summary: "Create food  by name role : admin"
      description: Create fod by name
      operationId: newFoodName
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name:  ingredient
          in: body
          description: The food JSON you want to POST
          schema:
            $ref: "#/definitions/FoodNameObject"
          required: true
      responses:
        "201":
          description: food created
          schema:
            $ref: "#/definitions/FoodNameResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"

  /food/names/untranslated:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getUntranslatedFoods
      summary: "Retrieve untranslated foods roles: admin"
      description: Retrieve the untranslated foods 
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces: 
        - application/json
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FoodUntranslatedResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"

  /food/names/{id}:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      summary: "Get food names ingredients and composition by id roles: admin"
      description: get the name ingredients and composition of a food by id
      operationId: getFoodName
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the food to retrieve
          type: string
          required: true
      responses:
        "200":
          description: Food retrieved
          schema:
            $ref: "#/definitions/FoodNameResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - food
      summary: "Update food  roles: admin"
      description: Update the name of a food
      operationId: updateFoodName
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the food to update
          type: string
          required: true
        - name:  food
          in: body
          description: The food  JSON you want to POST
          schema:
            $ref: "#/definitions/FoodNameObject"
          required: true
      responses:
        "200":
          description: food updated
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/verify/{id}:
    x-swagger-router-controller: food
    put:
      tags:
        - food
      summary: Verify food
      description: set recognised to true
      operationId: verifyFood
      security:
        - Bearer: []
      x-security-scopes:
        - patient
        - admin
      consumes:
        - application/json
        - application/octet-stream  

      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the food to veirfy
          type: string
          required: true

      responses:
        "200":
          description: User Updated
          schema:
            # a pointer to a definition
            $ref: "#/definitions/ServerResponse"
        "404":
          description: Food Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
        # responses may fall through to errors
  /food/unverified:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getUnverifiedFoods
      summary: Retrieve food history
      description: Retrieve the food history of the  user
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces: 
        - application/json
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FoodUnverifiedResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /food/{id}:
    x-swagger-router-controller: food
    get:
      tags:
        - food
      operationId: getFoodById
      summary: Retrieve users food by Id
      description: Retrieve the food history of the  user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
        - admin
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the food
          type: string
          required: true
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/FoodResponse"   
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "Food not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /nutrients/types:
    x-swagger-router-controller: nutrient
    get:
      tags:
        - nutrients
      operationId: getNutrientTypes
      summary: get nutrients
      description: Retrive the list of nutrients and its ids
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - patient
        - admin
        - profesional
      consumes:
        - application
      produces: 
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string  

      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/NutrientsTypeResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /nutrients/{user}/{days}:
    x-swagger-router-controller: nutrient
    get:
      tags:
        - nutrients
      summary: Retrieve nutrients
      description: Retrieve the  info of the ingestion of nutrents  from a patient in the last {days} days
      operationId: getNutrients
      security:
        - Bearer: []
      x-security-scopes:
        - profesional
        - patient
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: days
          in: path
          description: the days to retrieve 
          type: number
          required: true
        - name: user
          in: path
          description: the user to retrieve the nutrient ingetion
          type: string
          required: true
      responses:
        "200":
          description: nutrients retrieved
          schema:
            $ref: "#/definitions/NutrientResponse"
        "400":
          description: Nutrient not valid
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: User Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /drink:
    x-swagger-router-controller: drink
    post:
      tags:
        - drinks
      operationId: newDrink
      summary: post a  drink
      description: Upload a drink for the logged user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - name:  drink
          in: body
          description: The drink JSON you want to POST
          schema:
            $ref: "#/definitions/DrinkObject"
          required: true

      responses:
        "201":
          description: "Success"
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /drink/history/{user}:
    x-swagger-router-controller: drink
    get:
      tags:
        - drinks
      operationId: getDrinks
      summary: Retrieve drink history
      description: Retrieve the drink history of the user
      security:
        - Bearer: []
      x-security-scopes:
        - patient
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - name: user
          in: path
          description: The nickname of the user to retrieve drink history
          type: string
          required: true
        - name: next
          in: query
          description: the id for retrieve the next page of results
          type: number
          required: false
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DrinkHistoryResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/RepeatedResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /drink/types:
    x-swagger-router-controller: drink
    get:
      tags:
        - drinks
      operationId: getDrinkTypes
      summary: Retrieve drink types
      description: Retrieve the drink types
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - admin
        - patient
        - profesional
      consumes:
        - application/json
      produces: 
        - application/json
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          required: false
          type: string  
      responses:
        "200":
          description: "Success"
          schema:
            $ref: "#/definitions/DrinkTypesResponse"
        "403":
          description: "Access Denied"
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: "User not found"
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /ingredient/all:
    x-swagger-router-controller: ingredient
    get:
      tags:
        - ingredients
      summary: Get all ingredients 
      description: get  all ingredients
      operationId: getIngredients
      security:
        - Bearer: []
      x-security-scopes:
        - admin
        - patient
        - profesional
      consumes:
        - application/json
      produces:
        - application/json   
      parameters:
        - description: Provide a header to specify the language.
          in: header
          name: Accept-Language
          type: string  
          required: true 
      responses:
        "200":
          description: ingredients retrieved
          schema:
            $ref: "#/definitions/IngredientsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /ingredient/untranslated:
    x-swagger-router-controller: ingredient
    get:
      tags:
        - ingredients
      summary: "Get all untranslated ingredients roles: admin"
      description: get  untranslated  ingredients
      operationId: getUntranslatedIngredients
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json   
      responses:
        "200":
          description: ingredients retrieved
          schema:
            $ref: "#/definitions/IngredientsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /ingredient:
    x-swagger-router-controller: ingredient
    post:
      tags:
        - ingredients
      summary: Create ingredient 
      description: Create ingredient with new parameters
      operationId: newIngredient
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name:  ingredient
          in: body
          description: The drink JSON you want to POST
          schema:
            $ref: "#/definitions/IngredientAdminObject"
          required: true
      responses:
        "201":
          description: ingredient created
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /ingredient/{id}:
    x-swagger-router-controller: ingredient
    get:
      tags:
        - ingredients
      summary: Get ingredient 
      description: get ingredient with id
      operationId: getIngredient
      security:
        - Bearer: []
        - ApiKey: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the ingredient to retrieve
          type: string
          required: true
      responses:
        "200":
          description: ingredient retrieved
          schema:
            $ref: "#/definitions/IngredientResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
    put:
      tags:
        - ingredients
      summary: Update ingredient 
      description: Update ingredient with new parameters
      operationId: updateIngredient
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the ingredient to update
          type: string
          required: true
        - name:  ingredient
          in: body
          description: The ingredient  JSON you want to POST
          schema:
            $ref: "#/definitions/IngredientAdminObject"
          required: true
      responses:
        "200":
          description: ingredient updated
          schema:
            $ref: "#/definitions/ServerResponse"
        "400":
          description: Bad Request
          schema:
            $ref: "#/definitions/BadRequestResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"

    delete:
      tags:
        - ingredients
      summary: Delete ingredient
      description: Delete ingredient 
      operationId: deleteIngredient
      security:
        - Bearer: []
      x-security-scopes:
        - admin
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: id
          in: path
          description: The id of the ingredient to delete
          type: string
          required: true
      responses:
        "204":
          description: Ingredient deleted
          schema:
            $ref: "#/definitions/ProfesionalsResponse"
        "403":
          description: Access Denied
          schema:
            $ref: "#/definitions/AccessDeniedResponse"
        "404":
          description: Ingredient Not Found
          schema:
            $ref: "#/definitions/NotFoundResponse"
        "500":
          description: "Server Error"
          schema:
            $ref: "#/definitions/ServerErrorResponse"
  /swagger:
    x-swagger-pipe: swagger_raw
# complex objects have schema definitions
definitions:
  AuthenticationObject:
    type: object
    required:
      - user
      - password
    properties:
      user:
        type: string
        example: "username"
      password:
        type: string
        example: "password"
  PatientProfileObject:
    required:
      - name
      - surname
      - age
      - sex
      - race
    properties:
      name:
        type: string
        example: Nombre
      surname:
        type: string
        example: Surname
      age:
        type: number
        example: 37
      sex:
        type: number
        example: 1
        minimum: 1
        maximum: 2
      race:
        type: number
        example: 1
        minimum: 1
        maximum: 5
      diabetes:
        type: boolean
        example: true
      htn:
        type: boolean
        example: true
      dyslipidemia:
        type: boolean
        example: true
      hyperuricemia:
        type: boolean
        example: true 
  UserObject:
    required:
      - user
      - email
      - password
      - repeatPassword
    properties:
      _id:
        type: string
      user:
        type: string
        example: name
      email:
        type: string
        example: email
      password:
        type: string
        example: password
      repeatPassword:
        type: string
        example: password
      code:
        type: string
        example: HealthProfesionalCodeOptional
  userSearchObject:
    required:
      - query
    properties:
      query:
        type: string
        example: nickname or email
  newRequestObject:
    required:
      - user
    properties:
      user:
        type: string
        example: user nickname
      message:
        type: string
        example: message to the user.
        maxLength: 100
  ProfesionalProfileObject:
    required:
      - name
      - surname
      - specialty
    properties:
      name:
        type: string
        example: name
      surname:
        type: string
        example: surname
      specialty:
        type: string
        example: Nephrologist
  UserEmailObject:
    required:
      - user
      - email
    properties:
      user:
        type: string
        example: user
      email:
        type: string
        example: email@host.es

  UserListObject:
    required:
      - user
      - email
      - enabled
      - role
    properties:
      _id:
        type: string
      user:
        type: string
        example: name
      email:
        type: string
        example: email
      enabled:
        type: boolean
        example: false
      role:
        type: string
        example: user
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
      updated:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"


  ForgotPasswordObject:
    required:
      - email

    properties:
      email:
        type: string
        example: test@test.com

  ResetPasswordObject:
    required:
      - email
      - password
      - repeatPassword

    properties:
      email:
        type: string
        example: test@test.com
      password:
        type: string
        example: "123456789"
      repeatPassword:
        type: string
        example: "123456789"
  refreshObject:
    required:
      - refreshToken
    properties:
      refreshToken:
        type: string
        example: "djhgw432u14t234j2bhrweqg72314234u3214ku"
  ChangePasswordObject:
    required:
      - oldPassword
      - password
      - repeatPassword

    properties:
      oldPassword:
        type: string
        example: "123456789"
      password:
        type: string
        example: "123456789"
      repeatPassword:
        type: string
        example: "123456789"
  RequestObject:
    required:
      - _id
    properties:
      _id:
        type: string
      user:
        type: string
        example: profesional or patient nickname
      message:
        type: string
        example: Message added to the request
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  KeyObject:
    required:
      - name
    properties:
      _id:
        type: string
      name:
        type: string
        example: name
      enabled:
        type: boolean
        example: false
      key:
        type: string
        example: 54cd66-69d3e0fb-asa1b302e54e8
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  MeasureObject:
    required:
      - type
      - value
    properties:
      type:
        type: number
        example: 1
      value:
        type: string
        example: "20"
      user:
        type: string
        example: "nickname of the patient"
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  MeasureRequestObject:
    required:
      - type
      - value
    properties:
      type:
        type: number
        example: 1
      value:
        type: string
        example: "20"
      user:
        type: string
        example: "nickname of the patient"
      timestamp:
        type: number
        example: 1602793226
  MeasureTypeObject:
    required:
      - measure
      - description
    properties:
      measure:
        type: number
        example: 1
      description:
        type: string
        example: Weight
  NutrientsTypeObject:
    required:
      - nutrient
      - description
      - key
    properties:
      nutrient:
        type: number
        example: 1
      description:
        type: string
        example: Iron,
      key:
        type: string
        example: iron
  NotificationObject:
    required:
      - id
      - message
      - notification
      - variables
      - created
    properties:
      id:
        type: string
      message:
        type: string
        example: "User has a new message"
      notification:
        type: number
        example: 1
      variables:
        type: array
        items:
          type: string
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  NotificationTypeObject:
    required:
      - notification
      - message
    properties:
      notification:
        type: number
        example: 1
      title:
        type: string
        example: "title"
      description:
        type: string
        example: "User has a new message"
      message:
        type: string
        example: "User has a new message"
      variables:
        type: array
        items:
          $ref: "#/definitions/VariableObject"
  VariableObject:
    required:
      - name
      - description
    properties:
      description:
        type: string
        example: "description of the variable"
      name:
        type: string
        example: "vairable name"
  MessageObject:
    required:
      - id
      - sender
      - message
      - viewed
      - created
    properties:
      id:
        type: string
        example: "the id of the message"
      sender:
        type: boolean
        example: true
      message:
        type: string
        example: "User has a new message"
      viewed:
        type: boolean
        example: false
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  FoodHistoryObject:
    required:
      - created
    properties:
      _id:
        type: string
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
      recognised:
        type: boolean
        example: false
      verified:
        type: boolean
        example: false
      image_url:
        type: string
        example: https://path/image.jpg
      volume:
        type: number
        example: 30.1
      food:
        $ref: "#/definitions/FoodObject"
  FoodObject:
    required:
      - created
    properties:
      composition:
          $ref: "#/definitions/NutrientObject"
      ingredients:
        type: array
        items: 
          $ref: "#/definitions/IngredientObject"
      recognised:
        type: boolean
        example: true
      verified:
        type: boolean
        example: true
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  FoodNameObject:
    required:
      - name
    properties:
      _id:
        type: string
        example: "4312q453825tuerwethjgurwq39rwqr"
      name:
          $ref: "#/definitions/i18nObject"
  IngredientObject:
    required:
      - name
    properties:
      id:
        type: string
        example: "4312q453825tuerwethjgurwq39rwqr"
      name:
        type: string
        example: "tomato"
  IngredientAdminObject:
    required:
      - name
    properties:
      id:
        type: string
        example: "4312q453825tuerwethjgurwq39rwqr"
      name:
          $ref: "#/definitions/i18nObject"
  i18nObject:
    properties:
      es:
        type: string
        example: Hola
      en:
        type: string
        example: Hello

  DrinkObject:
    required:
      - type
      - volume
    properties:
      type:
        type: number
        example: 1
      volume:
        type: number
        example: 1
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  DrinkHistoricObject:
    required:
      - type
      - volume
      - created
    properties:
      type:
        $ref: "#/definitions/DrinkTypeObject"
      volume:
        type: number
        example: 1
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
  DrinkTypeObject:
    required:
      - type
      - name
      - nutrients
    properties:
      type:
        type: number
        example: 1
      name:
        type: string
        example: water
      nutrients:
         $ref: "#/definitions/NutrientObject"
  RaceTypeObject:
    required:
      - type
      - description
    properties:
      type:
        type: number
        example: 1
      description:
        type: string
        example: Asian
  GenderTypeObject:
    required:
      - type
      - description
    properties:
      type:
        type: number
        example: 1
      description:
        type: string
        example: male
  RegisterObject:
    required:
      - os
      - token
    properties:
      os:
        type: string
        example: android
      token:
        type: string
        example: "token"
  RuleObject:
    required:
      - type
      - condition
      - value
      - notificationType
    properties:
      patient:
        type: string
        example: nickname
      type:
        type: number
        example: 1
      measureType:
        type: number
        example: 2
      nutrientType:
        type: number
        example: 1
      condition:
        type: number
        example: 1
      value:
        type: number
        example: 10
      period:
        type: number
        minimum: 1
        maximum: 30
        example: 1
      notificationType:
        type: number
        example: 1
  RuleRetrievedObject:
    required:
      - type
      - condition
      - value
      - notificationType
    properties:
      id:
        type: string
      patient:
        type: string
        example: nickname
      type:
        type: number
        example: 1
      measureType:
        type: number
        example: 2
      nutrientType:
        type: number
        example: 1
      condition:
        type: number
        example: 1
      value:
        type: number
        example: 10
      period:
        type: number
        minimum: 1
        maximum: 30
        example: 1
      notificationType:
        type: number
        example: 1
      enabled:
        type: boolean
        example: true
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
      updated:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"

  RuleTypeObject:
    required:
      - type
      - name
      - description
    properties:
      type:
        type: number
        example: 1
      name:
        type: string
        example: rule name
      description:
        type: string
        example: description
  NutrientObject:
      required:
        - total_fat
        - saturated_fat
        - cholesterol
        - sodium
        - total_carbohydrate
        - dietary_fiber
        - sugars
        - protein
        - potassium
        - phosphorus
        - water
        - alcohol
        - caffeine
        - calcium
        - iron
      properties:
        total_fat:
          type: number
          example: 1
        saturated_fat:
          type: number
          example: 1
        cholesterol:
          type: number
          example: 1
        sodium:
          type: number
          example: 1
        total_carbohydrate:
          type: number
          example: 1
        dietary_fiber:
          type: number
          example: 1
        sugars:
          type: number
          example: 1
        protein:
          type: number
          example: 1
        potassium:
          type: number
          example: 1
        phosphorus:
          type: number
          example: 1
        water:
          type: number
          example: 1
        alcohol:
          type: number
          example: 1
        caffeine:
          type: number
          example: 1
        calcium:
          type: number
          example: 1
        iron:
          type: number
          example: 1
        calories:
          type: number
          example: 1
  NutrientInfoObject:
    required:
      - created
      - nutrients
    properties:
      created:
        type: string
        format: date-time
        example: "2016-06-14T10:24:11.387Z"
      nutrients:
        $ref: "#/definitions/NutrientObject"
  ConditionTypeObject:
    required:
      - type
      - description
    properties:
      type:
        type: number
        example: 1
      description:
        type: string
        example: description
  UserLanguageObject:
    required:
      - language
    properties:
      language:
        type: string
        example: es
  UsersResponse:
    required:
      - message
      - statusCode
      - users
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      users:
        type: array
        items:
          $ref: "#/definitions/UserListObject"
  UsersEmailResponse:
    required:
      - message
      - statusCode
      - users
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      users:
        type: array
        items:
          $ref: "#/definitions/UserEmailObject"
  RequestsResponse:
    required:
      - message
      - statusCode
      - requests
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      requests:
        type: array
        items:
          $ref: "#/definitions/RequestObject"
  UserSearchResponse:
     required:
      - message
      - statusCode
      - user
     properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      user:
        type: string
        example: "nickname"
  UserResponse:
    required:
      - message
      - statusCode
      - user
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      user:
        $ref: "#/definitions/UserListObject"

  NotFoundResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "Error: Resource Not found"
      statusCode:
        type: number
        example: 404
  ProfesionalsResponse:
    required:
      - message
      - statusCode
      - profesionals
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      profesionals:
        type: array
        items:
          type: string
        example: ["profesional1","profesional2","profesional3"]
  PatientsResponse:
    required:
      - message
      - statusCode
      - patients
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      patients:
        type: array
        items:
          type: string
        example: ["patient1","patient2","patient3"]

  TokenResponse:
    required:
      - message
      - statusCode
      - token
      - refreshToken
      - role
      - expires
      - username
    properties:
      message:
        type: string
        example: "Error: Resource Not found"
      statusCode:
        type: number
        example: 404
      token:
        type: string
        example: "dsdf4r2u983r821309r423r0983474379234ijosdf098"
      refreshToken:
        type: string
        example: "dsdf4r2u983r821309r423r0983474379234ijosdf098"
      role:
        type: string
        example: "admin"
      expires:
        type: number
        example: 12323123123
      username:
        type: string
        example: "username"
      language:
        type: string
        example: en
  MeasureTypesResponse:
      required:
        - message
        - statusCode
        - measurements
      properties:
        message:
          type: string
          example: "Error: Internal Server Error"
        statusCode:
          type: number
          example: 500
        measurements:
          type: array
          items:
           $ref: "#/definitions/MeasureTypeObject"
  NutrientsTypeResponse:
      required:
        - message
        - statusCode
        - nutrients
      properties:
        message:
          type: string
          example: "Error: Internal Server Error"
        statusCode:
          type: number
          example: 500
        nutrients:
          type: array
          items:
           $ref: "#/definitions/NutrientsTypeObject"
  GenderTypesResponse:
      required:
        - message
        - statusCode
        - genders
      properties:
        message:
          type: string
          example: "Error: Internal Server Error"
        statusCode:
          type: number
          example: 500
        genders:
          type: array
          items:
           $ref: "#/definitions/GenderTypeObject"
  RaceTypesResponse:
      required:
        - message
        - statusCode
        - races
      properties:
        message:
          type: string
          example: "Success"
        statusCode:
          type: number
          example: 200
        races:
          type: array
          items:
           $ref: "#/definitions/RaceTypeObject"
  MeasurementsResponse:
      required:
        - message
        - statusCode
        - measurements
      properties:
        message:
          type: string
          example: "Success"
        statusCode:
          type: number
          example: 200
        measurements:
          type: array
          items:
           $ref: "#/definitions/MeasureObject"
  KeysResponse:
    required:
      - message
      - statusCode
      - keys
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      keys:
        type: array
        items:
          $ref: "#/definitions/KeyObject"
  KeyResponse:
    required:
      - message
      - statusCode
      - key
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      key:
        $ref: "#/definitions/KeyObject"
  NotificationsResponse:
    required:
      - message
      - statusCode
      - notifications
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      notifications:
        type: array
        items:
          $ref: "#/definitions/NotificationObject"
  NotificationTypesResponse:
    required:
      - message
      - statusCode
      - notifications
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      notifications:
        type: array
        items:
          $ref: "#/definitions/NotificationTypeObject"
  NotificationsCountResponse:
    required:
      - message
      - statusCode
      - notifications
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      notifications:
        type: number
        example: 0
  MessagesCountResponse:
    required:
      - message
      - statusCode
      - messages
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      messages:
        type: number
        example: 0
  MessagesResponse:
    required:
      - message
      - statusCode
      - messages
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      messages:
        type: array
        items:
          $ref: "#/definitions/MessageObject"
      next:
        type: string
        example: "/messages/profesional?next=1"
  FoodHistoryResponse:
    required:
      - message
      - statusCode
      - foods
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      foods:
        type: array
        items:
          $ref: "#/definitions/FoodHistoryObject"
  FoodUnverifiedResponse:
    required:
      - message
      - statusCode
      - foods
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      foods:
        type: array
        items:
          $ref: "#/definitions/FoodHistoryObject"
  FoodUntranslatedResponse:
    required:
      - message
      - statusCode
      - foods
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      foods:
        type: array
        items:
          $ref: "#/definitions/FoodNameObject"
  FoodNameResponse:
    required:
      - message
      - statusCode
      - food
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      food:
        $ref: "#/definitions/FoodNameObject"
  DrinkHistoryResponse:
    required:
      - message
      - statusCode
      - drinks
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      next:
        type: string
        example: "drinks/history/patient?next=2"
      drinks:
        type: array
        items:
          $ref: "#/definitions/DrinkHistoricObject"
  DrinkTypesResponse:
    required:
      - message
      - statusCode
      - drinks
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      drinks:
        type: array
        items:
          $ref: "#/definitions/DrinkTypeObject"
  IngredientsResponse:
    required:
      - message
      - statusCode
      - ingredients
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      ingredients:
        type: array
        items:
          $ref: "#/definitions/IngredientObject"
  IngredientResponse:
    required:
      - message
      - statusCode
      - ingredient
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      ingredient:
          $ref: "#/definitions/IngredientAdminObject"
  RulesResponse:
    required:
      - message
      - statusCode
      - rules
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      rules:
          type: array
          items: 
            $ref: "#/definitions/RuleRetrievedObject"
  RuleResponse:
    required:
      - message
      - statusCode
      - rule
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      rule:
          $ref: "#/definitions/RuleRetrievedObject"
  ServerResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
  NewFoodResponse:
    required:
      - message
      - statusCode
      - food_id
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      food_id:
        type: string
        example: "aef425123farefe12asdffa34adea3"
  FoodResponse:
    required:
      - message
      - statusCode
      - food
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      food:
        $ref: "#/definitions/FoodObject"
  BadRequestResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "Bad Request"
      statusCode:
        type: number
        example: 400
  AccessDeniedResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "Access Denied"
      statusCode:
        type: number
        example: 403
  RepeatedResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "item already exists"
      statusCode:
        type: number
        example: 409
  RulesTypeResponse:
    required:
      - message
      - statusCode
      - rules
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      rules:
          type: array
          items: 
            $ref: "#/definitions/RuleTypeObject"

  NutrientResponse:
    required:
      - message
      - statusCode
      - historic
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      total:
        type: number
        example: 200
      historic:
          type: array
          items: 
            $ref: "#/definitions/NutrientInfoObject"
  ConditionsTypeResponse:
    required:
      - message
      - statusCode
      - conditions
    properties:
      message:
        type: string
        example: "success"
      statusCode:
        type: number
        example: 200
      conditions:
          type: array
          items: 
            $ref: "#/definitions/ConditionTypeObject"
  PatientProfileResponse:
    required:
      - message
      - statusCode
      - profile
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      profile:
        $ref: "#/definitions/PatientProfileObject"
  ProfesionalProfileResponse:
    required:
      - message
      - statusCode
      - profile
    properties:
      message:
        type: string
        example: "Success"
      statusCode:
        type: number
        example: 200
      profile:
        $ref: "#/definitions/ProfesionalProfileObject"   
  ServerErrorResponse:
    required:
      - message
      - statusCode
    properties:
      message:
        type: string
        example: "Error: Internal Server Error"
      statusCode:
        type: number
        example: 500
